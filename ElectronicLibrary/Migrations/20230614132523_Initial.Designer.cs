// <auto-generated />
using System;
using ElectronicLibrary.DAO.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ElectronicLibrary.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20230614132523_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("biography");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Book", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("ElectronicCount")
                        .HasColumnType("integer");

                    b.Property<string>("ISBN10")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("isbn10");

                    b.Property<string>("ISBN13")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)")
                        .HasColumnName("isbn13");

                    b.Property<string>("LongDesc")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("long_description");

                    b.Property<int>("PagesCount")
                        .HasColumnType("integer")
                        .HasColumnName("pages_count");

                    b.Property<int>("PaperCount")
                        .HasColumnType("integer");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint")
                        .HasColumnName("publisher_id");

                    b.Property<string>("ShortDesc")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("short_description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<string>("TitleImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title_image_url");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.BookCopy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("book_copy_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BookId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<byte>("Condition")
                        .HasColumnType("smallint")
                        .HasColumnName("physical_condition");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("copy_number");

                    b.Property<string>("QRContent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qr_content");

                    b.Property<long?>("SourceId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("source_id");

                    b.Property<byte>("Type")
                        .HasColumnType("smallint")
                        .HasColumnName("copy_type");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("SourceId")
                        .IsUnique();

                    b.ToTable("book_copy", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("discount_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("EmailContent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email_content");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<byte>("Percent")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SentDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_datetime");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<DateTime>("Stop")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stop");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("discount", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.ElectronicSource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("electronic_source_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<int>("FileSize")
                        .HasColumnType("integer")
                        .HasColumnName("file_size");

                    b.Property<DateTime>("UploadDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_datetime");

                    b.HasKey("Id");

                    b.ToTable("electronic_source", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Description")
                        .IsUnique();

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Publisher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("publisher_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("WebsiteUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("website_url");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("publisher", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.PurchaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long>("CreatedForId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_for_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatedForId");

                    b.ToTable("purchase_order", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.TakingOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("taking_order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedById")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by_id");

                    b.Property<long>("CreatedForId")
                        .HasColumnType("bigint")
                        .HasColumnName("created_for_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint")
                        .HasColumnName("status");

                    b.Property<DateTime>("Stop")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("stop");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CreatedForId");

                    b.ToTable("taking_order", (string)null);
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Bithday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bithday");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<byte>("Role")
                        .HasColumnType("smallint")
                        .HasColumnName("role");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("book_author", b =>
                {
                    b.Property<long>("AuthorsId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<long>("BooksId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.HasKey("AuthorsId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("book_author");
                });

            modelBuilder.Entity("book_genres", b =>
                {
                    b.Property<long>("BooksId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("GenresId")
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    b.HasKey("BooksId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("book_genres");
                });

            modelBuilder.Entity("discount_book", b =>
                {
                    b.Property<long>("BooksId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("DiscountsId")
                        .HasColumnType("bigint")
                        .HasColumnName("discount_id");

                    b.HasKey("BooksId", "DiscountsId");

                    b.HasIndex("DiscountsId");

                    b.ToTable("discount_book");
                });

            modelBuilder.Entity("purchase_basket", b =>
                {
                    b.Property<long>("BookCopyId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_copy_id");

                    b.Property<long>("PurchaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("purchase_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("BookCopyId", "PurchaseId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("purchase_basket");
                });

            modelBuilder.Entity("taking_book", b =>
                {
                    b.Property<long>("BooksId")
                        .HasColumnType("bigint")
                        .HasColumnName("book_id");

                    b.Property<long>("TakingsId")
                        .HasColumnType("bigint")
                        .HasColumnName("taking_id");

                    b.HasKey("BooksId", "TakingsId");

                    b.HasIndex("TakingsId");

                    b.ToTable("taking_book");
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Book", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.BookCopy", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.Book", "Book")
                        .WithMany("Copies")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicLibrary.DAO.Models.ElectronicSource", "Source")
                        .WithOne("BookCopy")
                        .HasForeignKey("ElectronicLibrary.DAO.Models.BookCopy", "SourceId");

                    b.Navigation("Book");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Discount", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.User", "User")
                        .WithMany("Discounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.PurchaseOrder", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.User", "CreatedBy")
                        .WithMany("CreatedPurchases")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicLibrary.DAO.Models.User", "CreatedFor")
                        .WithMany("UserPurchases")
                        .HasForeignKey("CreatedForId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("CreatedFor");
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.TakingOrder", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.User", "CreatedBy")
                        .WithMany("CreatedTakings")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicLibrary.DAO.Models.User", "CreatedFor")
                        .WithMany("UserTakings")
                        .HasForeignKey("CreatedForId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("CreatedFor");
                });

            modelBuilder.Entity("book_author", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicLibrary.DAO.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("book_genres", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicLibrary.DAO.Models.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("discount_book", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicLibrary.DAO.Models.Discount", null)
                        .WithMany()
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("purchase_basket", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.BookCopy", null)
                        .WithMany()
                        .HasForeignKey("BookCopyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicLibrary.DAO.Models.PurchaseOrder", null)
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("taking_book", b =>
                {
                    b.HasOne("ElectronicLibrary.DAO.Models.BookCopy", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ElectronicLibrary.DAO.Models.TakingOrder", null)
                        .WithMany()
                        .HasForeignKey("TakingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Book", b =>
                {
                    b.Navigation("Copies");
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.ElectronicSource", b =>
                {
                    b.Navigation("BookCopy")
                        .IsRequired();
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("ElectronicLibrary.DAO.Models.User", b =>
                {
                    b.Navigation("CreatedPurchases");

                    b.Navigation("CreatedTakings");

                    b.Navigation("Discounts");

                    b.Navigation("UserPurchases");

                    b.Navigation("UserTakings");
                });
#pragma warning restore 612, 618
        }
    }
}
